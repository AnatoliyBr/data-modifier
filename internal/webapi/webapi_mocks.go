// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/webapi/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=./internal/webapi/interfaces.go -destination=./internal/webapi/webapi_mocks.go -package=webapi
//
// Package webapi is a generated GoMock package.
package webapi

import (
	reflect "reflect"

	entity "github.com/AnatoliyBr/data-modifier/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockWebAPI is a mock of WebAPI interface.
type MockWebAPI struct {
	ctrl     *gomock.Controller
	recorder *MockWebAPIMockRecorder
}

// MockWebAPIMockRecorder is the mock recorder for MockWebAPI.
type MockWebAPIMockRecorder struct {
	mock *MockWebAPI
}

// NewMockWebAPI creates a new mock instance.
func NewMockWebAPI(ctrl *gomock.Controller) *MockWebAPI {
	mock := &MockWebAPI{ctrl: ctrl}
	mock.recorder = &MockWebAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebAPI) EXPECT() *MockWebAPIMockRecorder {
	return m.recorder
}

// AddAbsenceStatus mocks base method.
func (m *MockWebAPI) AddAbsenceStatus(arg0 *entity.User, arg1 [2]entity.CustomTime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAbsenceStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAbsenceStatus indicates an expected call of AddAbsenceStatus.
func (mr *MockWebAPIMockRecorder) AddAbsenceStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAbsenceStatus", reflect.TypeOf((*MockWebAPI)(nil).AddAbsenceStatus), arg0, arg1)
}

// GetUserID mocks base method.
func (m *MockWebAPI) GetUserID(arg0 *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockWebAPIMockRecorder) GetUserID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockWebAPI)(nil).GetUserID), arg0)
}
